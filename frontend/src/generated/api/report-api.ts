/* tslint:disable */
/* eslint-disable */
/**
 * report-ads_port
 * report-ads_port API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { Msg } from '../models';
// @ts-ignore
import { Report } from '../models';
// @ts-ignore
import { ReportCreate } from '../models';
/**
 * ReportApi - axios parameter creator
 * @export
 */
export const ReportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Report
         * @param {ReportCreate} reportCreate 
         * @param {string} [href] 
         * @param {string} [slug] 
         * @param {string} [userAgent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReport: async (reportCreate: ReportCreate, href?: string, slug?: string, userAgent?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportCreate' is not null or undefined
            assertParamExists('createReport', 'reportCreate', reportCreate)
            const localVarPath = `/api/v1/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (href !== undefined && href !== null) {
                localVarHeaderParameter['href'] = String(href);
            }

            if (slug !== undefined && slug !== null) {
                localVarHeaderParameter['slug'] = String(slug);
            }

            if (userAgent !== undefined && userAgent !== null) {
                localVarHeaderParameter['user-agent'] = String(userAgent);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reportCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Reports
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReports: async (sort?: string, range?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportApi - functional programming interface
 * @export
 */
export const ReportApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Report
         * @param {ReportCreate} reportCreate 
         * @param {string} [href] 
         * @param {string} [slug] 
         * @param {string} [userAgent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReport(reportCreate: ReportCreate, href?: string, slug?: string, userAgent?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Msg>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReport(reportCreate, href, slug, userAgent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Reports
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReports(sort?: string, range?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Report>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReports(sort, range, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportApi - factory interface
 * @export
 */
export const ReportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Report
         * @param {ReportCreate} reportCreate 
         * @param {string} [href] 
         * @param {string} [slug] 
         * @param {string} [userAgent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReport(reportCreate: ReportCreate, href?: string, slug?: string, userAgent?: string, options?: any): AxiosPromise<Msg> {
            return localVarFp.createReport(reportCreate, href, slug, userAgent, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Reports
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReports(sort?: string, range?: string, options?: any): AxiosPromise<Array<Report>> {
            return localVarFp.getReports(sort, range, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createReport operation in ReportApi.
 * @export
 * @interface ReportApiCreateReportRequest
 */
export interface ReportApiCreateReportRequest {
    /**
     * 
     * @type {ReportCreate}
     * @memberof ReportApiCreateReport
     */
    readonly reportCreate: ReportCreate

    /**
     * 
     * @type {string}
     * @memberof ReportApiCreateReport
     */
    readonly href?: string

    /**
     * 
     * @type {string}
     * @memberof ReportApiCreateReport
     */
    readonly slug?: string

    /**
     * 
     * @type {string}
     * @memberof ReportApiCreateReport
     */
    readonly userAgent?: string
}

/**
 * Request parameters for getReports operation in ReportApi.
 * @export
 * @interface ReportApiGetReportsRequest
 */
export interface ReportApiGetReportsRequest {
    /**
     * Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
     * @type {string}
     * @memberof ReportApiGetReports
     */
    readonly sort?: string

    /**
     * Format: &#x60;[start, end]&#x60;
     * @type {string}
     * @memberof ReportApiGetReports
     */
    readonly range?: string
}

/**
 * ReportApi - object-oriented interface
 * @export
 * @class ReportApi
 * @extends {BaseAPI}
 */
export class ReportApi extends BaseAPI {
    /**
     * 
     * @summary Create Report
     * @param {ReportApiCreateReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public createReport(requestParameters: ReportApiCreateReportRequest, options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).createReport(requestParameters.reportCreate, requestParameters.href, requestParameters.slug, requestParameters.userAgent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Reports
     * @param {ReportApiGetReportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public getReports(requestParameters: ReportApiGetReportsRequest = {}, options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).getReports(requestParameters.sort, requestParameters.range, options).then((request) => request(this.axios, this.basePath));
    }
}
