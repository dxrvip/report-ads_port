/* tslint:disable */
/* eslint-disable */
/**
 * report-ads_port
 * report-ads_port API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Domain } from '../models';
// @ts-ignore
import { DomainCreate } from '../models';
// @ts-ignore
import { DomainUpdate } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
/**
 * DomainApi - axios parameter creator
 * @export
 */
export const DomainApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Domain
         * @param {DomainCreate} domainCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDomain: async (domainCreate: DomainCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domainCreate' is not null or undefined
            assertParamExists('createDomain', 'domainCreate', domainCreate)
            const localVarPath = `/api/v1/domain`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(domainCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Domain
         * @param {number} domainId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomain: async (domainId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domainId' is not null or undefined
            assertParamExists('deleteDomain', 'domainId', domainId)
            const localVarPath = `/api/v1/domain/{domain_id}`
                .replace(`{${"domain_id"}}`, encodeURIComponent(String(domainId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Domain
         * @param {number} domainId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomain: async (domainId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domainId' is not null or undefined
            assertParamExists('getDomain', 'domainId', domainId)
            const localVarPath = `/api/v1/domain/{domain_id}`
                .replace(`{${"domain_id"}}`, encodeURIComponent(String(domainId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Domains
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomains: async (sort?: string, range?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/domain`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Domain
         * @param {number} domainId 
         * @param {DomainUpdate} domainUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDomain: async (domainId: number, domainUpdate: DomainUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domainId' is not null or undefined
            assertParamExists('updateDomain', 'domainId', domainId)
            // verify required parameter 'domainUpdate' is not null or undefined
            assertParamExists('updateDomain', 'domainUpdate', domainUpdate)
            const localVarPath = `/api/v1/domain/{domain_id}`
                .replace(`{${"domain_id"}}`, encodeURIComponent(String(domainId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(domainUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DomainApi - functional programming interface
 * @export
 */
export const DomainApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DomainApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Domain
         * @param {DomainCreate} domainCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDomain(domainCreate: DomainCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Domain>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDomain(domainCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Domain
         * @param {number} domainId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDomain(domainId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDomain(domainId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Domain
         * @param {number} domainId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDomain(domainId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Domain>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDomain(domainId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Domains
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDomains(sort?: string, range?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Domain>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDomains(sort, range, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Domain
         * @param {number} domainId 
         * @param {DomainUpdate} domainUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDomain(domainId: number, domainUpdate: DomainUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Domain>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDomain(domainId, domainUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DomainApi - factory interface
 * @export
 */
export const DomainApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DomainApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Domain
         * @param {DomainCreate} domainCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDomain(domainCreate: DomainCreate, options?: any): AxiosPromise<Domain> {
            return localVarFp.createDomain(domainCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Domain
         * @param {number} domainId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomain(domainId: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteDomain(domainId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Domain
         * @param {number} domainId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomain(domainId: number, options?: any): AxiosPromise<Domain> {
            return localVarFp.getDomain(domainId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Domains
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomains(sort?: string, range?: string, options?: any): AxiosPromise<Array<Domain>> {
            return localVarFp.getDomains(sort, range, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Domain
         * @param {number} domainId 
         * @param {DomainUpdate} domainUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDomain(domainId: number, domainUpdate: DomainUpdate, options?: any): AxiosPromise<Domain> {
            return localVarFp.updateDomain(domainId, domainUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createDomain operation in DomainApi.
 * @export
 * @interface DomainApiCreateDomainRequest
 */
export interface DomainApiCreateDomainRequest {
    /**
     * 
     * @type {DomainCreate}
     * @memberof DomainApiCreateDomain
     */
    readonly domainCreate: DomainCreate
}

/**
 * Request parameters for deleteDomain operation in DomainApi.
 * @export
 * @interface DomainApiDeleteDomainRequest
 */
export interface DomainApiDeleteDomainRequest {
    /**
     * 
     * @type {number}
     * @memberof DomainApiDeleteDomain
     */
    readonly domainId: number
}

/**
 * Request parameters for getDomain operation in DomainApi.
 * @export
 * @interface DomainApiGetDomainRequest
 */
export interface DomainApiGetDomainRequest {
    /**
     * 
     * @type {number}
     * @memberof DomainApiGetDomain
     */
    readonly domainId: number
}

/**
 * Request parameters for getDomains operation in DomainApi.
 * @export
 * @interface DomainApiGetDomainsRequest
 */
export interface DomainApiGetDomainsRequest {
    /**
     * Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
     * @type {string}
     * @memberof DomainApiGetDomains
     */
    readonly sort?: string

    /**
     * Format: &#x60;[start, end]&#x60;
     * @type {string}
     * @memberof DomainApiGetDomains
     */
    readonly range?: string
}

/**
 * Request parameters for updateDomain operation in DomainApi.
 * @export
 * @interface DomainApiUpdateDomainRequest
 */
export interface DomainApiUpdateDomainRequest {
    /**
     * 
     * @type {number}
     * @memberof DomainApiUpdateDomain
     */
    readonly domainId: number

    /**
     * 
     * @type {DomainUpdate}
     * @memberof DomainApiUpdateDomain
     */
    readonly domainUpdate: DomainUpdate
}

/**
 * DomainApi - object-oriented interface
 * @export
 * @class DomainApi
 * @extends {BaseAPI}
 */
export class DomainApi extends BaseAPI {
    /**
     * 
     * @summary Create Domain
     * @param {DomainApiCreateDomainRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainApi
     */
    public createDomain(requestParameters: DomainApiCreateDomainRequest, options?: AxiosRequestConfig) {
        return DomainApiFp(this.configuration).createDomain(requestParameters.domainCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Domain
     * @param {DomainApiDeleteDomainRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainApi
     */
    public deleteDomain(requestParameters: DomainApiDeleteDomainRequest, options?: AxiosRequestConfig) {
        return DomainApiFp(this.configuration).deleteDomain(requestParameters.domainId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Domain
     * @param {DomainApiGetDomainRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainApi
     */
    public getDomain(requestParameters: DomainApiGetDomainRequest, options?: AxiosRequestConfig) {
        return DomainApiFp(this.configuration).getDomain(requestParameters.domainId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Domains
     * @param {DomainApiGetDomainsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainApi
     */
    public getDomains(requestParameters: DomainApiGetDomainsRequest = {}, options?: AxiosRequestConfig) {
        return DomainApiFp(this.configuration).getDomains(requestParameters.sort, requestParameters.range, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Domain
     * @param {DomainApiUpdateDomainRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainApi
     */
    public updateDomain(requestParameters: DomainApiUpdateDomainRequest, options?: AxiosRequestConfig) {
        return DomainApiFp(this.configuration).updateDomain(requestParameters.domainId, requestParameters.domainUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}
